import mongoose from "mongoose";const subscriptionSchema = new mongoose.Schema({    name: {        type: String,        required: [true, 'Subscription name is required'],        trim: true,        minlength: 2,        maxLength: 100,    },    price: {        type: Number,        required: [true, 'Price is required'],        min: [1, 'Price must be greater than 0'],    },    currency: {        type: String, // Changed from Number to String        enum: ['USD', 'EUR', 'INR'],        default: 'INR'    },    frequency: {        type: String,        enum: ['daily', 'weekly', 'monthly', 'yearly'],        default: 'monthly',    },    category: {        type: String,        enum: ['sports', 'news', 'entertainment', 'lifestyle', 'technology', 'finance', 'politics', 'other'],        required: true,    },    paymentMethod: {        type: String,        required: true,        trim: true,    },    status: {        type: String,        enum: ['active', 'cancelled', 'expired'],        default: 'active',        index: true, // Index added for better query performance    },    startDate: {        type: Date,        required: true,        validate: {            validator: (value) => value <= new Date(),            message: 'Start date cannot be in the future'        }    },    renewalDate: {        type: Date,        required: true,        validate: {            validator: function (value) {                return this.startDate && value > this.startDate;            },            message: 'Renewal date must be after start date'        }    },    user: {        type: mongoose.Schema.Types.ObjectId,        ref: 'User',        required: true,        index: true,    }}, {timestamps: true});// Auto-calculate renewal date if missingsubscriptionSchema.pre('save', function (next) {    if (!this.renewalDate && this.frequency) {        const renewalPeriods = {            daily: 1,            weekly: 7,            monthly: 30,            yearly: 365,        };        if (renewalPeriods[this.frequency]) {            this.renewalDate = new Date(this.startDate);            this.renewalDate.setDate(this.renewalDate.getDate() + renewalPeriods[this.frequency]);        }    }    // Ensure the status is set correctly based on renewalDate    if (this.renewalDate && this.renewalDate < new Date()) {        this.status = this.status === 'cancelled' ? 'cancelled' : 'expired';    }    next();});const Subscription = mongoose.model('Subscription', subscriptionSchema);export default Subscription;